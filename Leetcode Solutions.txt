|| Leetcode Solutions||

*Day-1* 

Q. Two Sum--------

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> idx;
    vector<int> result;
    
    for (int i = 0; i < nums.size(); i++) 
    {
        int complement = target - nums[i];
        if (idx.find(complement) != idx.end()) 
        {
            result.push_back(idx[complement]);
            result.push_back(i);
            break;
        }
        idx[nums[i]] = i;
    }
    
    return result;
    }
};

-------------------------------------------------

Q. Reverse Integer------


class Solution {
public:
    int reverse(int x) {
        long sum =0, rem;
        while(x)
        {
            rem = x % 10;
            sum = sum * 10 + rem;
            x = x /10;

            if(sum >= INT_MAX || sum <= INT_MIN) return 0;
        }
        return sum;
        
    }
};
-------------------------------------------------

|| *DAY-2* ||

Q. Palindrome Number ------

class Solution {
public:
    bool isPalindrome(int x) {
        long int sum = 0, rem;
        long int temp = x;
        while ( x>0)
        {
            rem = x % 10;
            sum = sum * 10 + rem;
            x /= 10;
        }
        return (sum == temp);
        
    }
};
------------------------------------------------

Q. Valid Parenthesis ------

class Solution {
public:
    bool isValid(string s) {
        
    stack<char> st;
    
    for(char c : s){
        if(c == '{' || c == '[' || c == '(')
        {
            st.push(c);
        }
        else{
        if (st.empty() || 
                    (c == ')' && st.top() != '(') || 
                    (c == '}' && st.top() != '{') ||
                    (c == ']' && st.top() != '[')) {
                    return false;
                }
             st.pop();
        }
    }
    return st.empty();
    }  
};
--------------------------------------------------

|| *DAY-3* ||

Q. Power of Two ------


class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0)return false;
        while(n != 1){
            if(n % 2 != 0)return false;
            n /= 2;
        }
        return true;
        
    }
};
---------------------------------------------------

Q. Power of Three -------

class Solution {
public:
    bool isPowerOfThree(int n) {
        if(n <= 0)return false;
        int num = 1;
        while(num < INT_MAX / 3){
            if( num == n) return true;
            num *= 3;
        }
        if ( num == n ) return true;
        return false;

        
    }
};
----------------------------------------------------

|| *DAY-4* ||

Q. Roman To Integer ------

class Solution {
public:
    int romanToInt(string s) {
        int ans = 0;
        unordered_map <char,int> mp { {'I',1}, {'V',5}, {'X',10}, {'L',50},
        {'C',100}, {'D',500}, {'M',1000}};

        for(int i = 0; i < s.size(); i++){
            if(mp[s[i]] < mp[s[i+1]]){
                ans = ans-mp[s[i]];
            }
            else{
                ans = ans+mp[s[i]];
            }
        }
        return ans;
        
    }
};
------------------------------------

Q. Plus One ------

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        int n = digits.size();
        for(int i = n-1; i >= 0; i--){
            if(i == n-1)
            digits[i]++;
            if(digits[i] == 10){
                digits[i] = 0;
                if(i != 0){
                    digits[i-1]++;
                }
                else{
                    digits.push_back(0);
                    digits[i] = 1;
                }
            }
        }
        
        return digits;
    }
};
---------------------------------------------

|| *DAY-5* ||

Q. Add Digits -----

class Solution {
public:
    int addDigits(int num) {
        int sum = 0;
        int digit = 0;

        while (num>0){
            digit = num % 10;
            sum += digit;
            num /= 10;

        if(num == 0 && sum > 9) {
            num = sum;
            sum = 0;
        }
        }
        return sum;
    }
};
---------------------------------------

Q. Factorial Trailing Zeroes -----

class Solution {
public:
    int trailingZeroes(int n) {
        return n/5 + n/25 + n/125 + n/625 + n/3125;
    }
};
---------------------------------------

|| *DAY-6* ||

Q. Remove Element -----


class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int n = nums.size();
    vector<int>ans;
    for(int i =0; i<n; i++)
    {
        if(nums[i]==val)
        {
            continue;
        }
        else
        {
            ans.push_back(nums[i]);
        }
    }
    nums.clear();
    for(int i =0; i < ans.size(); i++)
    {
       nums.push_back(ans[i]);
    }
    return nums.size();
    }
};
-------------------------------------------

Q. Search Insert Position ------

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
    int index = lower_bound(nums.begin(), nums.end(), target)-nums.begin();
        return index;
    }
};
--------------------------------------------

|| *DAY-7* ||

Q. Happy Number -----

class Solution {
public:
    bool isHappy(int n) {
      unordered_set<int>seen;

      while(n != 1 && seen.find(n) == seen.end()){
        seen.insert(n);
        int sum = 0;
        while(n != 0){
             int digit = n % 10;
             sum += digit * digit; 
             n /= 10;
        }
        n = sum;
      }  
      return n == 1;
        
    }
};
--------------------------------------

Q. Ugly Number -----

class Solution {
public:
    bool isUgly(int n) {
        if(n<=0) return false;
        while(n%2 ==0){
            n/=2;
        }
        while(n%3 ==0){
            n/=3;
        }
        while(n%5 ==0){
            n/=5;
        }
        return n == 1;
        
    }
};
------------------------------


|| *DAY-8* ||

Q. Single Number -----

class Solution {
public:
    int singleNumber(vector<int>& nums) {
    int result = 0;
    for(int i = 0; i < nums.size(); i++)
    {
        result ^= nums[i];
    }
    return result;

    }
};
-------------------------------

Q. Missing Number ------ 

class Solution {
public:
    int missingNumber(vector<int>& nums) {
    int sum = 0, n = nums.size(), actual_sum = 0, expected_sum = n*(n+1)/2;

    for(int i = 0; i < n; i++)
    {
        actual_sum = actual_sum + nums[i];
    }
    sum = expected_sum - actual_sum;
    return sum;
    }
};
-------------------------------

|| *DAY-9* ||

Q. Score of a String -----

class Solution {
public:
    int scoreOfString(string s) {
        int score = 0;
        for(int i = 1; i < s.size(); i++)
        {
          int diff = abs(static_cast<int>(s[i]) - static_cast<int>(s[i - 1]));
          score += diff;
        }
        
        return score;
    }
};
------------------------------------

Q. Add String ------

class Solution {
public:
    string addStrings(string num1, string num2) {
        string result = "";
        int i = num1.size()-1, j = num2.size()-1, carry = 0;

        while( i >= 0 || j >= 0 || carry != 0)
        {
            int sum = 0;
            if(i >= 0)
            {
                sum += (num1[i] - '0');
                i--;
            }
            if (j >= 0)
            {
                sum += (num2[j] - '0');
                j--;
            }
            sum += carry;
            carry = sum / 10;
            sum = sum % 10;
            result = to_string(sum) + result;
        }
        return result;
    }
};
---------------------------------------

|| *DAY-10* ||

Q. Max Consecutive Ones -------

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
         int maxCount = 0;
    int count = 0;
    
    for (int num : nums) 
    {
        if (num == 1) 
        {
            count++;
            maxCount = max(maxCount, count);
        } 
        else 
        {
            count = 0;
        }
    }
    
    return maxCount;
    }
};
----------------------------------------

Q. Maximum Nesting Depth of the Parentheses ------

class Solution {
public:
    int maxDepth(string s) {
        int n = s.size();
        int oc = 0;
        int ans = 0;
        int i =0;
        while (i<n)
        {
            if(s[i]=='(')
            {
                oc++;
                ans=max(oc,ans);
            }
            if(s[i]==')')
            {
                oc--;
            }
            i++;
        }
        return ans;
    }
};
---------------------------------------------

|| *DAY-10* ||

Q. Running Sum of 1d Array ------


class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        int n = nums.size();
        for(int i =1; i <n; i++)
        {
            nums[i] += nums[i-1];
        }
        return nums;
    }
};
------------------------------------------

Q. Find Peak Element ------

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if(n == 1)
        return 0;
        if(nums[0]>nums[1]) 
        return 0;
        if(nums[n-1]>nums[n-2]) 
        return n-1;
        int s = 1, e = n-2;
        while(s<=e)
        {
         int mid = (s + e) /2;
         cout << mid;
         if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]) 
         {
            cout << mid;
            return mid;
         }
         if(nums[mid]>nums[mid-1] && nums[mid]<nums[mid+1]) 
         {
            s = mid+1;
         }
         else
         {
            e = mid-1;
         }
        }
       return -1;
    }
};
----------------------------------------

|| *Day-12* ||

Q. Fibonacci Number --------

class Solution {
public:
    int fib(int n) {
        int num, n1 = 0 ,n2 = 1;
        if(n == 1 )
        return 1;
        if(n == 0)
        return 0;
        for(int i = 2; i <= n; i++)
        {
            num = n1 + n2;
            n1 = n2;
            n2 = num;
        }
        return num;
        
    }
};
-------------------------------------

Q. Search a 2D Matrix -------

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        int s = 0, e = m*n -1;
        while ( s<= e)
        {
            int mid = s+((e-s)/2);
            int row = mid / n, col = mid % n;
            if(matrix[row][col] == target)
            {
                return true;
            }
            else if ( target > matrix[row][col])
            {
                s = mid +1 ;
            }
            else 
            {
                e = mid -1 ;
            }
        }
        return false;
    }
};
------------------------------------------

|| *Day-13* ||

Q. Matrix Diagonal Sum -----

class Solution {
public:
    int diagonalSum(vector<vector<int>>& mat) {
        int n = mat.size();
        int sum = 0;
        for (int i = 0; i < n; i++)
        sum += mat[i][i] + mat[i][n-i-1];
        if(n % 2) sum -= mat[n/2][n/2];
        return sum;
    }
};
------------------------------------------

Q. Convert 1D Array Into 2D Array -------

class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        int N = original.size();
        if ( N != m*n)
        return {};

        vector<vector<int>>ans(m, vector<int>(n));

        int x = 0;
        for(int i =0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                ans[i][j] = original[x++];
            }
        } 
        return ans;
    }      
};
---------------------------------------------

|| *Day-14* ||

Q. Number of Good Pairs ------

class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        pair<int,int>p;
        for(int i = 0; i < n; i++)
        {
            for(int j = i+1; j < n; j++)
            {
                if(nums[i]==nums[j] && i<j)
                {
                p = make_pair(i,j);
                count++;
                }
            }
        }
       return count; 
    }
};
--------------------------------------

Q. Find Peak Element ----- 

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if(n == 1)
        return 0;
        if(nums[0]>nums[1]) 
        return 0;
        if(nums[n-1]>nums[n-2]) 
        return n-1;
        int s = 1, e = n-2;
        while(s<=e)
        {
         int mid = (s + e) /2;
         cout << mid;
         if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]) 
         {
            cout << mid;
            return mid;
         }
         if(nums[mid]>nums[mid-1] && nums[mid]<nums[mid+1]) 
         {
            s = mid+1;
         }
         else
         {
            e = mid-1;
         }
        }
       return -1;
    }
};
----------------------------------------

|| *Day-15* ||

Q. Move Zeroes -------

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int count = 0;
        for (int i =0; i < nums.size(); i++){
            if(nums[i] == 0){
                count++;
                nums.erase(nums.begin() + i);
                i--;
            }
        }
        for(int i = 0; i < count; i++){
            nums.push_back(0);
        }
    }
};
---------------------------------------

Q. Single Element in a Sorted Array --------

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int ans;
        int n = nums.size();
        int s = 0, e =  n-1;
        if( n == 1)
        return nums[0];
        if(nums[0] != nums[1])
        return nums[0];
        if(nums[n-1] != nums[n-2])
        return nums[n-1];

        while(s<=e)
        {
            int mid = s+(e-s)/2;
            if(nums[mid] != nums[mid+1] && nums[mid] != nums[mid-1])
            {
            ans = nums[mid];
            break;
            }
            else if ( mid % 2 != 0 && nums[mid] == nums[mid-1])
            s = mid +1 ;
            else if( mid % 2 != 0 && nums[mid] == nums[mid+1])
            e = mid - 1;
            else if ( mid % 2 == 0 && nums[mid] == nums[mid+1])
            s = mid +1;
            else
            e = mid +1;
        }
        return ans;
    }
};
-----------------------------------------------

|| *Day-16* ||

Q. Power of Four ----- 

class Solution {
public:
    bool isPowerOfFour(int n) {
        if ( n <= 0) return false;
        int num = 1;
        while(num < INT_MAX / 4){
            if(num == n) return true;
            num *= 4;
        }
        if ( num == n) return true;
        return false;
        
    }
};
----------------------------------------------

Q. Valid Perfect Square ------

class Solution {
public:
    bool isPerfectSquare(int num) {
        long value = 1;

        while(value*value<=num){
            if(value*value == num) return true;
            value++;
        }
        return false;

    }
};
--------------------------------------------

|| *Day-17* ||

Q. Fizz Buzz -------

class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> word;
        for(int i = 1; i <= n; i++){
            if(i % 3 == 0 && i % 5 == 0){
                word.push_back("FizzBuzz");
            }
            else if(i % 3 == 0){
                word.push_back("Fizz");
            }
            else if (i % 5 == 0){
                word.push_back("Buzz");
            }
            else{
                word.push_back(to_string(i));
            }
        }
        return word;
    }
};
------------------------------

Q. Arranging Coins -------

class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> word;
        for(int i = 1; i <= n; i++){
            if(i % 3 == 0 && i % 5 == 0){
                word.push_back("FizzBuzz");
            }
            else if(i % 3 == 0){
                word.push_back("Fizz");
            }
            else if (i % 5 == 0){
                word.push_back("Buzz");
            }
            else{
                word.push_back(to_string(i));
            }
        }
        return word;
    }
};
-------------------------------------

|| *Day-18* ||

Q. Nim Game ------

class Solution {
public:
    bool canWinNim(int n) {
        return n % 4;
    }
};
----------------------------------

Q. Find the Maximum Achievable Number ------

class Solution {
public:
    int theMaximumAchievableX(int num, int t) {
        return num+t*2;
    }
};
----------------------------------

|| *Day-19* ||

Q. Sum Multiples -----

class Solution {
public:
    int sumOfMultiples(int n) {
        int ans = 0;
        for(int i = 3; i <= n; i++){
            if((i%3==0)||(i%5==0)||(i%7==0))ans += i;
        }
        return ans;
    }
};
-----------------------------------

Q. Largest Odd Number in String -----

class Solution {
public:
    string largestOddNumber(string num) {
        int n=num.size();
        string ans="";
        int i;
        for(i=n-1; i>=0; i--){
            if((num[i]-'0')%2 != 0)
            break;
        }
        return num.substr(0,i+1);
    }
};
-------------------------------------

|| *Day-20* ||

Q. Remove Duplicates from Sorted Array -------- 

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
    vector<int>ans;
    int n = nums.size();
    ans.push_back(nums[0]);
    for(int i = 1; i < n; i++)
    {
       if(nums[i]==nums[i-1])
       continue;
       else
       ans.push_back(nums[i]);
    }
    nums.clear();
    for(int i = 0 ; i < ans.size() ;i++)
    {
        nums.push_back(ans[i]);
    }
    return ans.size();
    }
};
----------------------------------------

Q. Rotate Array -------

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size()-1;
        k=k%nums.size();
        reverse(nums.begin(),nums.end());
        reverse(nums.begin(),nums.begin()+k);
        reverse(nums.begin()+k,nums.end());
    }
};
---------------------------------------

|| *Day-21* ||

Q. Next Greater Element I -------


class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
      unordered_map<int,int> mpp;
      stack<int> st;

      for(int i = nums2.size()-1 ; i>=0; i--){
        while(!st.empty() && st.top() <= nums2[i]){
            st.pop();
        }
        if(!st.empty()) mpp[nums2[i]] = st.top();
        else mpp[nums2[i]] = -1;
        st.push(nums2[i]);
      }
      vector<int> ans;
      for(int num:nums1){
        ans.push_back(mpp[num]);
      }
      return ans;
      }
};
-------------------------------------

Q. Find the Index of the First Occurrence in a String ------

class Solution {
public:
    int strStr(string haystack, string needle) {
        int m = haystack.size(), n = needle.size();
        for (int i = 0; i <= m - n; i++) {
            if (haystack.substr(i, n) == needle) {
                return i;
            }
        }
        return -1;
    }
};
-----------------------------------

|| *Day-22* ||

Q. Modify the Matrix -------

class Solution {
public:
    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> ans(matrix);

        for(int i = 0; i < n; i++){
            int max_val = numeric_limits<int>::min();
            for(int j = 0; j < m; j++){
                max_val = max(max_val, matrix[j][i]);
            }
            for(int j = 0; j < m; j++){
                if(matrix[j][i] == -1){
                    ans[j][i] = max_val;
                }
            }
        }
        return ans;
    }
};
--------------------------------------------

Q. Sort the Matrix Diagonally  -------

class Solution {
public:
    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {
        int m = mat.size(), n = mat[0].size();
        for(int i = 0; i < n; i++){
            int row = 0, col = i;
            vector<int>temp;
            while(row<m && col<n){
                temp.push_back(mat[row][col]);
                row++;
                col++;
            }
            sort(temp.begin(),temp.end());
            row = 0; 
            col = i;
            int ind = 0;
            while(row<m && col < n){
                mat[row] [col] = temp[ind];
                row++;
                col++;
                ind++;
            }
        }
        for(int j = 1; j < m; j++){
            int row = j, col=0;
            vector<int>temp;
            while(row<m && col<n){
                temp.push_back(mat[row][col]);
                row++;
                col++;
            }
            sort(temp.begin(),temp.end());
            row=j;
            col = 0;
            int ind = 0;
            while(row<m && col<n){
                mat[row][col] = temp[ind];
                row++;
                col++;
                ind++;
            }
        }
        return mat;
    }
};
-----------------------------------------------

|| *Day-23* ||

Q. Merge Two 2D Arrays by Summing Values ------ 

class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        for(int i = 0; i < nums1.size(); i++){
            int x = nums1[i][0];
            for(int j = 0; j < nums2.size(); j++){
                if(nums2[j][0] == x){
                    nums1[i][1] += nums2[j][1];
                    nums2[j] = {-1,-1};
                }
            }
        }
        for(int i = 0; i < nums2.size(); i++){
            if(nums2[i][0] !=-1 && nums2[i][1] !=-1){
                nums1.push_back(nums2[i]);
            }
        }
        sort(nums1.begin(),nums1.end(),[](vector<int> a,vector<int> b){
           return a[0] < b[0]; 
        });
        return nums1;
    }
};
--------------------------------------

Q. Merge Two 2D Arrays by Summing Values ------ 

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int i = m, j = 0; j < n; j++ ){
            nums1[i] = nums2[j];
            i++;
        }
        sort(nums1.begin(),nums1.end());
    }
};
------------------------------------

|| *Day-24* ||

Q. Transpose Matrix ------ 

class Solution {
public:
    vector<vector<int>> transpose(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>>temp(m,vector<int>(n));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                swap(matrix[i][j],temp[j][i]);
            }
        }
        return temp;
    }
};
------------------------------------

Q. Rotate Image ------- 

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
    
    for (int i = 0; i < n; i++) 
    {
        for (int j = i + 1; j < n; j++) 
        {
            swap(matrix[i][j], matrix[j][i]);
        }
    }

    for (int i = 0; i < n; i++) {
        reverse(matrix[i].begin(), matrix[i].end());
    }

    }
};
-------------------------------------

|| *Day-25* ||

Q. Check if Matrix Is X-Matrix ----- 

class Solution {
public:
    bool checkXMatrix(vector<vector<int>>& a) {
        int n = a.size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if((i==j )or(i+j)==(n-1))
                {
                    if(a[i][j]==0)
                        return false;
                }
                else
                {   if(a[i][j]!=0)
                        return false;
                }
            }
        }
        return true;;
    }
};
-----------------------------------------

Q. Find Missing and Repeated Values ------ 

class Solution {
public:
    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {
        vector<int>arr;
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[i].size(); j++){
                arr.push_back(grid[i][j]);
            }   
        }
        for(int i = 0; i < arr.size();){
            if(arr[i]!=arr[arr[i]-1])
            swap(arr[i],arr[arr[i]-1]);
            else
            i++;
        }
        vector<int> res;
        for(int i = 0; i< arr.size(); i++){
            if(arr[i] != i+1){
                res.push_back(arr[i]);
                res.push_back(i+1);
                break;
            }
        }
        return res;
    }
};
---------------------------------------------

|| *Day-26* ||

Q. Row With Maximum Ones ----- 

class Solution {
public:
    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        int count;
        int index = 0;
        int mcount = 0;
        for (int i = 0 ; i<n ; i++){
            count = 0;
            for (int j = 0; j<m ;j++){
                if(mat[i][j]==1){
                    count++;
                }
            }
            if (count>mcount){
                mcount = count;
                index = i;
            }
        }
        vector<int> ab = {index,mcount};
        return ab;
    }
};
-----------------------------------

|| *Day-27* ||

Q. Prime In Diagonal ------ 

class Solution {
public:

    bool isPrime(int n) {
        if(n==1) return false;
        for(int i = 2; i <= sqrt(n); i++) {
            if(n % i == 0) return false;
        }
        return true;
    }

    int diagonalPrime(vector<vector<int>>& nums) {
        int n = nums.size();
        int maxi = 0;
        
        for(int i = 0; i < n; i++) {
            if(isPrime(nums[i][i])) maxi = max(maxi,nums[i][i]);
            if(isPrime(nums[i][n-i-1])) maxi = max(maxi,nums[i][n-i-1]);
        }
        return maxi;
    }
};
--------------------------------------------------

|| *Day-28* ||

Q. Spiral Matrix -------- 

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> v;
        if(matrix.empty() || matrix[0].empty()) return v;
        
        int bottom = matrix.size() - 1;
        int right = matrix[0].size() - 1;
        int top = 0, left = 0;

        while(left <= right && top <= bottom){
            
            for(int i = left; i <= right; i++){
                v.push_back(matrix[top][i]);
            }
            top++;
            for(int i = top; i <= bottom; i++){
                v.push_back(matrix[i][right]);
            }
            right--;
            if(top <= bottom){
                for(int i = right; i >= left; i--){
                    v.push_back(matrix[bottom][i]);
                }
                bottom--;
            }
            if(left <= right){
                for(int i = bottom; i >= top; i--){
                    v.push_back(matrix[i][left]);
                }
                left++;
            }
        }
        
        return v;
    }
};
--------------------------------------------

|| *Day-29* ||

Q. Merge Sorted Array ------- 

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int i = m, j = 0; j < n; j++ ){
            nums1[i] = nums2[j];
            i++;
        }
        sort(nums1.begin(),nums1.end());
    }
};
--------------------------------------------

|| *Day-30* ||

Q. House Robber ------- 

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();

        if (n == 1) {
            return nums[0];
        }

        vector<int> dp(n, 0);

        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]);
        }

        return dp[n - 1];        
    }
};
----------------------------------

|| *Day-31* ||

Q. Sort Array By Parity -----------

class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int n = nums.size();
        int s = 0, e = n-1;
        while(s<e){
            if(nums[s]%2 == 0){
                s++;
            }
            else
            {
                swap(nums[s],nums[e]);
                e--;
            }
        }
        return nums;

    }
};
-------------------------------

|| *Day-32* ||

Sort Array By Parity II --------- 

class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        vector<int> v1,v2;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]%2==0)
            v2.push_back(nums[i]);
            else
            v1.push_back(nums[i]);
        }
        int l1=0,l2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(i%2==0)
            nums[i]=v2[l2++];
            else
            nums[i]=v1[l1++];
        }

        return nums;
    }
};
-----------------------------


|| *Day-33* ||

Q. Valid Mountain Array ----- 

class Solution {
public:
    bool validMountainArray(vector<int>& arr) {
        int n = arr.size();
        if(n<3)
        return false;
        int i = 0;
        for(;i+1<n && arr[i]<arr[i+1]; i++);
        if(i == 0 || i == n-1) return false;
        for(;i+1<n && arr[i] >arr[i+1];i++);
        return (i == n-1);
    }
};
------------------------------

|| *Day-34* ||

Q. Reverse Vowels of a String ----- 

class Solution {
public:
    string reverseVowels(string s) {
    unordered_set<char> vowels = {'a', 'e' , 'i', 'o','u','A','E','I','O','U'};
    int n = s.size();
        int start = 0, end = n-1;
        while(start<end){
            while(vowels.find(s[start]) == vowels.end() && start < end){
            start++;
            }
            while(vowels.find(s[end]) == vowels.end() && start < end){
            end--;
            }
            swap(s[start],s[end]);
            start++;
            end--;
        }
        return s;
    }
};
------------------------------------ 

Q. Majority Element ----- 

class Solution {
public:
    int majorityElement(vector<int>& nums) {
    sort(nums.begin(), nums.end());
        int n = nums.size();
        return nums[n/2];
    }
};
--------------------------------

|| *Day-35* ||

Q. Reverse String ------------

class Solution {
public:
    void reverseString(vector<char>& s) {
        int start = 0;
        int end = s.size()-1;
        while(start<end ){
            char temp=s[start];
            s[start]=s[end];
            s[start]=temp;
            swap(s[start],s[end]);
            start++;
            end--;
        }
    }
}; 
---------------------------------

|| *Day-36* ||

Q. Remove Outermost Parentheses -----------

class Solution {
public:
    string removeOuterParentheses(string s) {
            string ans;
            int check = 0;
            for(int i = 0; i < s.size(); i++){
                if(s[i] == '(')
                {
                    if(check > 0)
                    {
                        ans += s[i];
                    }
                    check++;
                }
                else{
                    check--;
                    if(check > 0){
                        ans += s[i];
                    }
                }
            }
        return ans;
    }
};
----------------------------------

Q. Binary Search ---------

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int s = 0, e = n-1;
        while(s<=e)
        {
            int mid = (s+e)/2;
            if(nums[mid] == target)
            {
                return mid;
            }
            else if(nums[mid] < target) 
            s = mid + 1;
            else 
            e = mid -1;   
        }
        return -1;
    }
};
----------------------------------------

|| *Day-37* ||

Q. Find All Duplicates in an Array ---------

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> ans;
        for(int i=0; i<nums.size(); i++){
            if(nums[abs(nums[i])-1]<0){
                ans.push_back(abs(nums[i]));
            }
            else{
                nums[abs(nums[i])-1] *= -1;
            }
        }
        return ans;
    }
};
-----------------------------------------
|| *Day-38* ||

Q. Reverse Linked List----------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* curr = head;
        ListNode* prev = nullptr;
        ListNode* next;
        while(curr != nullptr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};
--------------------------------------

|| *Day-39* ||

Q. Distribute Candies ------------

class Solution {
public:
    int distributeCandies(vector<int>& candyType) {
        sort(candyType.begin(),candyType.end());
        int diff = 1;
        for(int i = 1; i < candyType.size(); i++){
            if(diff == candyType.size()/2) return diff;
            if(candyType[i]>candyType[i-1]) diff++;
        }
        return diff;
    }
};
-------------------------------------------

Q. Path Crossing ---------------

class Solution {
public:
    bool isPathCrossing(string path) {
        int a = 0, b = 0;;
        set<vector<int>> x;
        x.insert({0, 0});
        for (char i: path)
        {
            if (i == 'N')
            {
                b++;
            } 
            else if (i == 'E')
            {
                a++;
            } 
            else if (i == 'S')
            {
                b--;
            }
            else 
            {
                a--;
            }
            if (x.find({a, b}) != x.end())
            {
                return true;
            }
            x.insert({a, b});
        }
        return false;
    }
};
------------------------------------